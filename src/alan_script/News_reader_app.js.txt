// Convert .txt to .js
// Use this sample to create your own voice commands
intent('What does this app do?', 'What can i do here', 'Hello',
  reply('This app keeps tab on the news, headlines and various articles.'));


const API_KEY = '89de96c9934d4c9b9e33016054d051a9';
let savedArticles = [];
intent ('Get me (the|) news from $(source* (.+))', (p) =>{
    let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?`;
   
    if(p.source.value){
        NEWS_API_URL=`${NEWS_API_URL}sources=${p.source.value.toLowerCase().split(' ').join('-')}&apiKey=${API_KEY}`
    }
    
    api.request(NEWS_API_URL, (error, response, body)=>{
               
        if(error || response && response.statusCode !== 200){
            p.play('Sorry, please try searching for news from a different sources');
            return;
        }else{
        const { articles } = JSON.parse(body);
        savedArticles = articles;
        
        p.play({ command: 'newHeadlines', articles});
        p.play(`Here are the (latest|recent) ${p.source.value}.`);
             p.play('would you like for me to read the headlines?');
         p.then(confirmation);
        }
    });
} )
// news by term
intent ('(get|give|show) (me|) headlines (on|from) $(term* (.*))', (p) =>{
    let NEWS_API_URL = `https://newsapi.org/v2/everything?`;
   
    if(p.term.value){
        NEWS_API_URL=`${NEWS_API_URL}q=${p.term.value.toLowerCase()}&apiKey=${API_KEY}`
    }
     
    api.request(NEWS_API_URL, (error, response, body)=>{
               
        if(error || response && response.statusCode !== 200){
            p.play('Sorry, please try searching another (term|topic)');
            return;
        }else{
        const { articles } = JSON.parse(body);
        savedArticles = articles;
        
        p.play({ command: 'newHeadlines', articles});
        p.play(`Here are the (latest|recent) articles on ${p.term.value}.`);
             p.play('would you like for me to read the headlines?');
         p.then(confirmation);
        }
    });
} )
//News by categories
const CATEGORIES = ['business', 'entertainment', 'general', 'health', 'sport', 'technology', 'science'];
const CATEGORIES_INTENT = `${CATEGORIES.map((category)=> `${category}~${category}`).join('|')}|`;

intent(`(show|what is|tell me|what's|what are|what're|read) (the|) (recent|latest|) $(N news|headlines) (in|about|on|) $(C~ ${CATEGORIES_INTENT})`,
  `(read|show|get|bring me|get me) (the|) (recent|latest) $(C~ ${CATEGORIES_INTENT}|) $(N news|headlines)`, 
       (p) => {
     let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?country=ng`;
    
     if(p.C.value){
         NEWS_API_URL=`${NEWS_API_URL}&apiKey=${API_KEY}&category=${p.C.value.toLowerCase()}&language=en`
     }
     
     api.request(NEWS_API_URL, (error, response, body)=>{
                   const { articles } = JSON.parse(body);
         if(!articles.length){
             p.play('Sorry, please try searching a different category' );
             return;
         }
      
         
         savedArticles = articles;
         
         p.play({ command:'newHeadlines', articles});
            if(p.C.value){
                p.play(`Here are the (latest|recent) articles on ${p.C.value}.`);
         }else{
             p.play(`Here are the (latest|recent) news.`);
         }
         
         p.play('would you like for me to read the headlines?');
         p.then(confirmation);
   });
             
});

const confirmation = context(()=>{
    intent( 'yes', async(p)=>{
        for(let i=0; i < savedArticles.length; i++){
            p.play({command: 'highlight', article: savedArticles[i]});
            p.play(`${savedArticles[i].title}`)
        }
    })
    intent ('no', (p)=>{
        p.play('Ok, let me know if you need anything else')
    })
})

intent('open(the|) (article|) (number|) $(number* (.*))', (p) =>{
    if(p.number.value){
        p.play({ command:'open', number: p.number.value, articles: savedArticles})
    }
});